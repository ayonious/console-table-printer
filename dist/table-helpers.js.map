{"version":3,"file":"table-helpers.js","sourceRoot":"","sources":["../src/table-helpers.ts"],"names":[],"mappings":";;AAAA,uDAA4D;AAE5D,SAAgB,eAAe,CAAC,IAAI,EAAE,SAAS,EAAE,IAAI;IACnD,QAAQ,SAAS,EAAE;QACjB,KAAK,kCAAgB,CAAC,IAAI;YACxB,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC3B,KAAK,kCAAgB,CAAC,KAAK;YACzB,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAC7B;YACE,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;KAC9B;AACH,CAAC;AATD,0CASC;AAED,SAAgB,4BAA4B,CAC1C,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,EAC3B,cAAc;IAEd,IAAI,GAAG,GAAG,IAAI,CAAC;IACf,KAAK,IAAI,GAAG,IAAI,cAAc,EAAE;QAC9B,GAAG,IAAI,KAAK,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;QAC7B,GAAG,IAAI,GAAG,CAAC;KACZ;IACD,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACvB,GAAG,IAAI,KAAK,CAAC;IACb,OAAO,GAAG,CAAC;AACb,CAAC;AAZD,oEAYC;AAED,SAAgB,WAAW,CAAC,IAAI;IAC9B,OAAO,EAAE,IAAI,EAAE,CAAC;AAClB,CAAC;AAFD,kCAEC;AAED,SAAgB,SAAS,CAAC,KAAK,EAAE,IAAI;IACnC,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;AACzB,CAAC;AAFD,8BAEC;AAED,SAAgB,kBAAkB,CAAC,MAAM,EAAE,IAAI;IAC7C,IAAI,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC;IAC9B,IAAI,MAAM,GAAG,GAAG,WAAW,EAAE,CAAC,MAAM,CAAC;IACrC,KAAK,IAAI,GAAG,IAAI,IAAI,EAAE;QACpB,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,EAAE,CAAC,MAAM,CAAC,CAAC;KACpE;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AAPD,gDAOC;AAED,SAAgB,2BAA2B,CAAC,KAAK,EAAE,cAAc;IAC/D,MAAM,GAAG,GAAG,4BAA4B,CAAC,KAAK,EAAE,cAAc,CAAC,CAAC;IAChE,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACjB,OAAO,GAAG,CAAC;AACb,CAAC;AAJD,kEAIC;AAED,SAAgB,iBAAiB,CAAC,SAAS,EAAE,OAAO;IAClD,IAAI,GAAG,GAAG,SAAS,CAAC,uBAAK,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;IAC1C,KAAK,IAAI,MAAM,IAAI,OAAO,EAAE;QAC1B,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC;KACrC;IACD,OAAO,GAAG,CAAC;AACb,CAAC;AAND,8CAMC","sourcesContent":["import { COLUMN_ALIGNMENT, COLOR } from \"./table-constants\";\n\nexport function textWithPadding(text, alignment, size) {\n  switch (alignment) {\n    case COLUMN_ALIGNMENT.left:\n      return text.padEnd(size);\n    case COLUMN_ALIGNMENT.right:\n      return text.padStart(size);\n    default:\n      return text.padStart(size);\n  }\n}\n\nexport function createTableHorizontalBorders(\n  { left, mid, right, other },\n  column_lengths\n) {\n  let ret = left;\n  for (let len of column_lengths) {\n    ret += other.repeat(len + 2);\n    ret += mid;\n  }\n  ret = ret.slice(0, -1);\n  ret += right;\n  return ret;\n}\n\nexport function createColum(name) {\n  return { name };\n}\n\nexport function createRow(color, text) {\n  return { color, text };\n}\n\nexport function findMaxLenOfColumn(column, rows) {\n  let column_name = column.name;\n  let max_ln = `${column_name}`.length;\n  for (let row of rows) {\n    max_ln = Math.max(max_ln, `${row.text[column_name] || \"\"}`.length);\n  }\n  return max_ln;\n}\n\nexport function printTableHorizontalBorders(style, column_lengths) {\n  const str = createTableHorizontalBorders(style, column_lengths);\n  console.log(str);\n  return str;\n}\n\nexport function createHeaderAsRow(createRow, columns) {\n  let row = createRow(COLOR.white_bold, {});\n  for (let column of columns) {\n    row.text[column.name] = column.name;\n  }\n  return row;\n}\n"]}