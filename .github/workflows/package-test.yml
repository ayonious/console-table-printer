name: Package Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test-package:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]
        include:
          # Test older Node versions without dev dependencies
          - node-version: 16.x
            production_only: true
          - node-version: 18.x
            production_only: true
          # Latest Node with all dependencies
          - node-version: 20.x
            production_only: false

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        registry-url: 'https://registry.npmjs.org'

    - name: Install dependencies (production only)
      if: ${{ matrix.production_only }}
      run: yarn install --frozen-lockfile --production

    - name: Install dependencies (all)
      if: ${{ !matrix.production_only }}
      run: yarn install --frozen-lockfile

    - name: Build package
      if: ${{ !matrix.production_only }}
      run: yarn build

    - name: Build package (TypeScript only)
      if: ${{ matrix.production_only }}
      run: |
        yarn add typescript@latest --dev
        yarn tsc

    - name: Pack package
      run: |
        yarn pack
        tar -xf console-table-printer-*.tgz
        cd package
        yarn init -y
        yarn add ../console-table-printer-*.tgz

    - name: Test package
      working-directory: package
      run: |
        cat > test.js << 'EOL'
        const { Table } = require('console-table-printer');
        const assert = require('assert');

        // Test basic table rendering
        const basicTable = new Table();
        basicTable.addRow({ id: 1, name: 'Test' });
        const basicRender = basicTable.render();
        assert(basicRender.includes('id'), 'Table should contain column header "id"');
        assert(basicRender.includes('name'), 'Table should contain column header "name"');
        assert(basicRender.includes('1'), 'Table should contain value "1"');
        assert(basicRender.includes('Test'), 'Table should contain value "Test"');

        // Test table with colors
        const colorTable = new Table();
        colorTable.addRow({ id: 1, name: 'Green Row' }, { color: 'green' });
        colorTable.addRow({ id: 2, name: 'Red Row' }, { color: 'red' });
        const colorRender = colorTable.render();
        assert(colorRender.includes('\x1b[32m'), 'Table should contain green color code');
        assert(colorRender.includes('\x1b[31m'), 'Table should contain red color code');

        // Test table with column options
        const optionsTable = new Table({
          columns: [
            { name: 'id', alignment: 'right' },
            { name: 'name', title: 'NAME' }
          ]
        });
        optionsTable.addRow({ id: 1, name: 'Test' });
        const optionsRender = optionsTable.render();
        assert(optionsRender.includes('NAME'), 'Table should contain custom column title "NAME"');
        
        // Test table with multiple rows and data types
        const complexTable = new Table();
        complexTable.addRows([
          { id: 1, name: 'Item 1', price: 10.99, inStock: true },
          { id: 2, name: 'Item 2', price: 20.50, inStock: false }
        ]);
        const complexRender = complexTable.render();
        assert(complexRender.includes('10.99'), 'Table should contain float value "10.99"');
        assert(complexRender.includes('true'), 'Table should contain boolean value "true"');
        assert(complexRender.includes('false'), 'Table should contain boolean value "false"');

        console.log('âœ… All render tests passed!');

        // Print a sample table to verify visual output
        const p = new Table();
        p.addRow({ id: 1, name: 'Product 1', price: 100 }, { color: 'green' });
        p.addRow({ id: 2, name: 'Product 2', price: 200 }, { color: 'yellow' });
        p.addRow({ id: 3, name: 'Product 3', price: 300 }, { color: 'red' });
        p.printTable();
        EOL

        node test.js 